?rnorm
help.search("rnorm")
rnorm
available.packages()
cls
clear
a <- available.packages()
head(rownames(a), 6)
find.package("devtools")
install.packages("devtools")
load
library(gdata)
1+3
install.packages("ISwR")
library(ISwR)
plot(rnorm(1000))
rnorm(15)
x<- 2
x+x
sqrt(x)
square(x)
weight <- c(60, 72, 57, 90, 95, 72)
c
weight
weight
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi <- weight/height^2
bmi
sum(weight)
length(weight)
sum(weight)/length(weight)
variance(weight)
var(weight)
xbar = sum(weight)/length(weight)
xbar
weight-xbar
sqrt(sum(weight-xbar)^2)/length(weight)-1)
sqrt(sum(weight-xbar)^2)/length(weight)-1))
sqrt(sum(weight-xbar)^2)/length(weight)-1)
sqrt(sum(weight-xbar)^2)/length(weight)-1
sqrt((sum(weight-xbar))^2)/length(weight)-1)
sqrt((sum(weight-xbar))^2/length(weight)-1))
sqrt((sum(weight-xbar))^2/length(weight)-1)
sqrt(sum(weight - xbar)^2)/length(weight)-1))
sqrt(sum(weight - xbar)^2)/(length(weight)-1))
sqrt(sum((weight - xbar)^2)/(length(weight)-1))
sd(weight)
t.test(bmi, mu=22.5)
plot(height, weight)
plot(height, weight, pch=2)
hh <- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
lines(hh, 22.5 * hh ^ 2)
lines(height, 22.5 * height ^ 2)
undo
undo()
plot(height, weight, 2)
plot(height, weight, pch=2)
ls()
ls
args(plot)
args(plot.default)
t1 <- c(1,3,5)
t1
t2 <- ("Ram", "Siri")
t2 <- c("Ram", "Siri")
t2
t3 <- (t1, t2, 10)
t3 <- c(t1, t2, 10)
t3
t4 <- c(1, "Ram")
t4
remove(t4)
t4 <- c(husband="Ram", wife="Siri")
t4
names[t4]
names(t4)
seq(4,9)
seq(1,100)
seq(4,10,12)
seq(4,10,2)
seq(4,10,9)
seq(4,10,4)
seq(4,10,1)
seq(4,10,3)
seq(4,10,5)
seq(1.6,1.9,0.5)
seq(1.60,1.90,0.50)
seq(1.60,1.90,0.05)
4:9
4:9:2
4:9 2
clear()
clear
oops <- c(7,9,13)
rep(oops, 3)
rep(oops, 1:3)
rep(1:2, c(10,15))
rep(1:2, c(10,10))
x <- 1:12
dim(x) <-c(3,4)
x
plot(rnorm(1000))
matrix(1:12, nrow = 3, ncol = 4)
matrix(1:12, nrow = 3, ncol = 3)
x<-matrix(1:12, nrow=3, ncol=3)
x
matrix(1:12, nrow = 3, ncol = 3, byrow = T)
matrix(1:12, nrow = 3, ncol = 4, byrow = T)
matrix(1:12, nrow = 3, ncol = 4, byrow = C)
matrix(1:12, nrow = 3, ncol = 4, byrow = B)
args(matrix.default)
matrix(1:12, nrow = 3, ncol = 4, byrow = A)
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
matrix(1:12, nrow = 3, ncol = 4)
x <- matrix(1:12, nrow = 3, byrow = T)
x
rownames(x) <- letters(1:3)
rownames(x) <- letters[1:3]
x
colnames(x) <- LETTERS[1:3]
colnames(x) <- LETTERS[1:4]
x
t(x)
t(x)
x
t(x)
data()
AirPassengers
install.packages(psych)
install.packages('psych')
library(psych)
hist(AirPassengers)
pi
factor(c("male","female")) -> f1
f1
f1.1
f1[1]
f1.male
c(1,2,3) -> c1
c1
c1[1]
c(1,"two",3) -> c1
c1[1]
summary(airmiles)
psych.summary(airmiles)
?summary
women
y <- as.factor(women)
library()
install.packages('MASS')
install.packages('dplyr')
library()
x=1:9
x
mat = matrix(x, ncol=3)
mat
matrow = matrix(x, nrow=3, byrow = T)
matrow
determinant(matrow)
mat[1]
mat[2]
mat[3,1]
mat[3,] #display all elements in column
mat[,] #display all elements equal to mat
mat[,-1] #exclude just first column and display all other
mat[2,]
mat[c(1,2),3]
mat[-c(1,2],-c(2,3))]
mat[-c(1,2),-c(2,3)]
mat[c(1,2), 3] = c(13,16)
mat
mat+10
mat
mat-2
mat*2
mat/2
dimnames(mat) = list(c('a','b',c),c('x','y',z))
dimnames(mat) = list(c('a','b',c),c('x','y','z'))
mat
dimnames(mat) = list(c('a','b','c'),c('x','y','z'))
mat
c
colname(mat)
colnames(mat)
mat[4,] = c(2,2,2)
rownames(mat)
colnames(mat) = c('col1','col2','col3')
mat
x=c(2,2,2)
y=c(4,5,6)
y
z=rbind(x,y)
z
mat = rbind(mat,x)
mat
mat = cbind(mat,x)
mat = cbind(x,mat)
mat = cbind(mat,col4)
col4 = c(1,1,1,1)
mat = cbind(mat,col4)
mat
class(mat)
A=matrix(1:9, nrow=3, byrow=T)
A
B=matrix(10:18, nrow=3, byrow=T)
B
A+B
A-B
A*B
A%*%B
X=matrix(x,nrow=3)
X
t(X)
crossprod(X) #Transpose and multiply with the same
t(X)%*%X
crosssprod(A,B) #This is equal to transpose of A and then do matrix multiplication
crossprod(A,B) #This is equal to transpose of A and then do matrix multiplication
t(A)%*%B
diag(A)
?diag
diag(x=3)
diag(2,4)
A=matrix(c(2,3,1,5), nrow=2, byrow=T)
B=matrix(c(2,5), nrow=2)
A
B
solve(A,B) #Inverse A and then multiply with B
det(A)
rowsums(A)
rowSums(A)
colSums(A)
rowMeans(A) #Calculate mean for each row
dim(A)
ncol(A) #No of cols
nrow(A) #No of rows
colSums(A)
datacsv1 = read.csv(file.choose(), header=T)
data()
Nile
Titanic
a = c(1,2,3)
b = c("x","y")
m=matrix(1:9, nrow=3)
List1 = list(a,b,m)
List2 = list(num=a,char=b,mat=m)
List1$a
List2$num
sum(List2$num)
sum(List2$mat)
sum(List2$char)
DiedAt <- c(22,40,72,41)
WriteAt <- c(16,18,36,36)
FirstName <- c('John','Edgar','Walt','Jane')
SecondName <- c('Doe','Poe','Whitman','Austen')
Sex <- c('MALE','MALE','MALE','FEMALE')
DateOfDeath <- c('2015-05-10','1849-10-07','1892-03-26','1817-07-18')
writers_df <- data.frame(DiedAt, WriteAt, FirstName, SecondName, Sex, DateOfDeath)
class(writers_df)
str(writers_df)
FirstName <- I(c('John','Edgar', 'Walt', 'Jane'))
str(writers_df) #Gives details about observations and variables
class(FirstName)
writers_df <- data.frame(DiedAt, WriteAt, I(FirstName), SecondName, Sex, DateOfDeath)
str(writers_df) #Gives details about observations and variables
writers_df <- data.frame(DiedAt, WriteAt, FirstName, SecondName, Sex, DateOfDeath)
str(writers_df) #Gives details about observations and variables
writers_df['Like'] <- c('Y','N','Y','N')
str(writers_df)
head(writers_df)
tail(writers_df) #returns last few records from the data
data()
head(Titanic)
tail(Titanic)
Titanic
names(writers_df)
names(writers_df) <- c('DateDiedAt','WroteAtAge', 'FirstName','LastName','Gender','MyLiking')
names(writers_df)
dim(writers_df)
writers_df$FirstName
writers_f[1:2,3]
writers_df[1:2,3] #1 to 2 row and 3rd column
attach(writers_df)
FirstName
LastName
WroteAtAge
writers_names_df <- writers_df[1:4, 'FirstName']
writers_names_df
class(writers_names_df)
writers_names_df <- writers_df[1:4, 'FirstName', drop=FALSE] #Get 1 to 4 rows of column FirstName
class(writers_names_df) #Since it is only one row it will not be treated as data.frame
str(writers_names_df)
writers_df$Location <- c('Belgium',' UK','USA','UK')
names(writers_df)
str(writers_df)
names(writers_df) <- c('DateDiedAt','WroteAtAge', 'FirstName','LastName','Gender',,'DateOfDeath','MyLiking','Location')
str(writers_df)
names(writers_df) <- c('DateDiedAt','WroteAtAge', 'FirstName','LastName','Gender',,'DateOfDeath','MyLiking','Location')
names(writers_df) <- c('DateDiedAt','WroteAtAge', 'FirstName','LastName','Gender','DateOfDeath','MyLiking','Location')
str(writers_df)
subset(writers_df, FirstName == 'Jane')
subset(writers_df, DateDiedAt > 35 & DateDiedAt<75)
t1 <- stack(writers_df)
t1
sum(t1$values)
class(t1$values)
t1 <- unstack(t1)
t1
a=2
b=10
c
c
c<-c(1:4)
c
d<-c(7:9)
d
any(a>c)
all(c<b)
all(c<b) #Check if all elements are less than b
all(c<d)
if(a<b){
a+10
} else {
b+10
}
if(a<b){
a+10
} else
{
b+10
}
if(a<b){
a+10
} else if(a>b){
b+10
} else {
a+b
}
ifelse(a>b, a+1, b+2) #Like conditional operator
for(i in c(1:20)){
print(i)
}
x=c('a','b','c',d)
for(i in c(1:4)){
print(x[i])
}
for(i in c(1:4)){
print(x[i])
}
x=c('a','b','c','d')
for(i in c(1:4)){
print(x[i])
}
for(i in seq_along(x)){
print(x[i])
}
count(x)
total(x)
source('~/Documents/Coding/Data Science/R/ConditionalStatements.R', echo=TRUE)
for(letter in x){
print(letter)
}
x=matrix(1:9, nrow=3)
for(i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
i=0
while(i<10){
print(i)
i++
}
i=0
while(i<10){
print(i)
i+1
}
i=0
while(i<10){
print(i)
i = i+1
}
while(i<10){
print(i)
i = i+1
}
i=0
while(i<10){
print(i)
i = i+1
if(i%%2 == 0){ #%% is for modulus here
break
}
}
name = function(){
print('Hello dude!')
}
name
name()
name = function(k){
print('Hello'+k)
}
name('Ram')
name = function(k){
print('Hello'+'Ram')
}
name('Ram')
name = function(k){
print(c('Hello', k))
}
name('Ram')
name = function(k){
print(paste('Hello', k))
}
name('Ram')
shiny::runApp('Documents/Coding/Data Science/R/myfirstest')
setwd("~/Documents/Coding/Data Science/R")
x<-sample(1:1000,200)
plot(x,dnorm(x), type="l")
?pnorm
pnorm(x, mean=mean(x),sd=sd(x))
plot(pnorm(x, mean=mean(x),sd=sd(x)))
plot(pnorm(x, mean=mean(x),sd=sd(x)),type="l")
hist(x, freq=T)
hist(x, freq=F)
hist(x, prob=T)
lines(density(x), col=4, lwd=1) #works only with prob
summary(x)
library(dplyr)
describeBy(x)
library(psych)
describeBy(x)
t.test(x)
?ad.test
install.packages('nortest')
library(nortest)
ad.test(x)
